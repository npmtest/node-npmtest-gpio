{"/home/travis/build/npmtest/node-npmtest-gpio/test.js":"/* istanbul instrument in package npmtest_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gpio/lib.npmtest_gpio.js":"/* istanbul instrument in package npmtest_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gpio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gpio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gpio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gpio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gpio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gpio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gpio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gpio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gpio.__dirname + '/lib.npmtest_gpio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gpio/node_modules/gpio/lib/gpio.js":"var fs = require('fs');\nvar util = require('util');\nvar path = require('path');\nvar EventEmitter = require('events').EventEmitter;\nvar exists = fs.exists || path.exists;\n\nvar gpiopath = '/sys/class/gpio/';\n\nvar logError = function(e) { if(e) console.log(e.code, e.action, e.path); };\nvar logMessage = function() { if (exports.logging) console.log.apply(console, arguments); };\n\nvar _write = function(str, file, fn, override) {\n\tif(typeof fn !== \"function\") fn = logError;\n\tfs.writeFile(file, str, function(err) {\n\t\tif(err && !override) {\n\t\t\terr.path = file;\n\t\t\terr.action = 'write';\n\t\t\tlogError(err);\n\t\t} else {\n\t\t\tif(typeof fn === \"function\") fn();\n\t\t}\n\t});\n};\nvar _read = function(file, fn) {\n\tfs.readFile(file, \"utf-8\", function(err, data) {\n\t\tif(err) {\n\t\t\terr.path = file;\n\t\t\terr.action = 'read';\n\t\t\tlogError(err);\n\t\t} else {\n\t\t\tif(typeof fn === \"function\") fn(data);\n\t\t\telse logMessage(\"value: \", data);\n\t\t}\n\t});\n};\n\nvar _unexport = function(number, fn) {\n\t_write(number, gpiopath + 'unexport', function(err) {\n\t\tif(err) return logError(err);\n\t\tif(typeof fn === 'function') fn();\n\t}, 1);\n};\nvar _export = function(n, fn) {\n\tif(exists(gpiopath + 'gpio'+n)) {\n\t\t// already exported, unexport and export again\n\t\tlogMessage('Header already exported');\n\t\t_unexport(n, function() { _export(n, fn); });\n\t} else {\n\t\tlogMessage('Exporting gpio' + n);\n\t\t_write(n, gpiopath + 'export', function(err) {\n\t\t\t// if there's an error when exporting, unexport and repeat\n\t\t\tif(err) _unexport(n, function() { _export(n, fn); });\n\t\t\telse if(typeof fn === 'function') fn();\n\t\t}, 1);\n\t}\n};\nvar _testwrite = function(file, fn) {\n\tfs.open(file, 'w', function(err, fd) {\n\t\tif (err) {\n\t\t\tfn(false, err);\n\t\t\treturn;\n\t\t}\n\t\tfs.close(fd, function(err){\n\t\t\tfn(true, null);\t\n\t\t});\n\t});\n};\n\n// fs.watch doesn't get fired because the file never\n// gets 'accessed' when setting header via hardware\n// manually watching value changes\nvar FileWatcher = function(path, interval, fn) {\n\tif(typeof fn === 'undefined') {\n\t\tfn = interval;\n\t\tinterval = 100;\n\t}\n\tif(typeof interval !== 'number') return false;\n\tif(typeof fn !== 'function') return false;\n\n\tvar value;\n\tvar readTimer = setInterval(function() {\n\t\t_read(path, function(val) {\n\t\t\tif(value !== val) {\n\t\t\t\tif(typeof value !== 'undefined') fn(val);\n\t\t\t\tvalue = val;\n\t\t\t}\n\t\t});\n\t}, interval);\n\n\tthis.stop = function() { clearInterval(readTimer); };\n};\n\n\nvar GPIO = function(headerNum, opts) {\n\topts = opts || {};\n\n\tvar self = this;\n\tvar dir = opts.direction;\n\tvar interval = opts.interval;\n\tif(typeof interval !== 'number') interval = 100;\n\tthis.interval = interval;\n\n\tthis.headerNum = headerNum;\n\tthis.value = 0;\n\n\tthis.PATH = {};\n\tthis.PATH.PIN =       gpiopath + 'gpio' + headerNum + '/';\n\tthis.PATH.VALUE =     this.PATH.PIN + 'value';\n\tthis.PATH.DIRECTION = this.PATH.PIN + 'direction';\n\n\tthis.export(function() {\n\t\tvar onSuccess = function() {\n\t\t\tself.setDirection(dir, function () {\n\t\t\t\tif(typeof opts.ready === 'function') opts.ready.call(self);\n\t\t\t});\n\t\t};\n\t\tvar attempts = 0;\n\t\tvar makeAttempt = function() {\n\t\t\tattempts += 1;\n\t\t\t_testwrite(self.PATH.DIRECTION, function(success, err){\n\t\t\t\tif (success) {\n\t\t\t\t\tonSuccess();\n\t\t\t\t} else {\n\t\t\t\t\tlogMessage('Could not write to pin: ' + err.code);\n\t\t\t\t\tif (attempts <= 5) {\n\t\t\t\t\t\tlogMessage('Trying again in 100ms');\n\t\t\t\t\t\tsetTimeout(makeAttempt, 100);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogMessage('Failed to access pin after 5 attempts. Giving up.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tmakeAttempt();\n\t});\n};\n\nutil.inherits(GPIO, EventEmitter);\n\n\n/**\n * Export and unexport gpio#, takes callback which fires when operation is completed\n */\nGPIO.prototype.export = function(fn) { _export(this.headerNum, fn); };\nGPIO.prototype.unexport = function(fn) {\n\tif(this.valueWatcher) this.valueWatcher.stop();\n\t_unexport(this.headerNum, fn);\n};\n\n\n/**\n * Sets direction, default is \"out\"\n */\nGPIO.prototype.setDirection = function(dir, fn) {\n\tvar self = this, path = this.PATH.DIRECTION;\n\tif(typeof dir !== \"string\" || dir !== \"in\") dir = \"out\";\n\tthis.direction = dir;\n\n\tlogMessage('Setting direction \"' + dir + '\" on gpio' + this.headerNum);\n\n\tfunction watch () {\n\t\tif(dir === 'in') {\n\t\t\tif (!self.valueWatcher) {\n\t\t\t\t// watch for value changes only for direction \"in\"\n\t\t\t\t// since we manually trigger event for \"out\" direction when setting value\n\t\t\t\tself.valueWatcher = new FileWatcher(self.PATH.VALUE, self.interval, function(val) {\n\t\t\t\t\tval = parseInt(val, 10);\n\t\t\t\t\tself.value = val;\n\t\t\t\t\tself.emit(\"valueChange\", val);\n\t\t\t\t\tself.emit(\"change\", val);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\t// if direction is \"out\", try to clear the valueWatcher\n\t\t\tif(self.valueWatcher) {\n\t\t\t\tself.valueWatcher.stop();\n\t\t\t\tself.valueWatcher = null;\n\t\t\t}\n\t\t}\n\t}\n\t_read(path, function(currDir) {\n\t\tvar changedDirection = false;\n\t\tif(currDir.indexOf(dir) !== -1) {\n\t\t\tlogMessage('Current direction is already ' + dir);\n\t\t\tlogMessage('Attempting to set direction anyway.');\n\t\t} else {\n\t\t\tchangedDirection = true;\n\t\t}\n\t\t_write(dir, path, function() {\n\t\t\twatch();\n\n\t\t\tif(typeof fn === 'function') fn();\n\t\t\tif (changedDirection) {\n\t\t\t\tself.emit('directionChange', dir);\n\t\t\t}\n\t\t}, 1);\n\t\n\t});\n};\n\n/**\n * Internal getter, stores value\n */\nGPIO.prototype._get = function(fn) {\n\tvar self = this, currVal = this.value;\n\n\tif(this.direction === 'out') return currVal;\n\n\t_read(this.PATH.VALUE, function(val) {\n\t\tval = parseInt(val, 10);\n\t\tif(val !== currVal) {\n\t\t\tself.value = val;\n\t\t\tif(typeof fn === \"function\") fn.call(this, self.value);\n\t\t}\n\t});\n};\n\n/**\n * Sets the value. If v is specified as 0 or '0', reset will be called\n */\nGPIO.prototype.set = function(v, fn) {\n\tvar self = this;\n\tvar callback = typeof v === 'function' ? v : fn;\n\tif(typeof v !== \"number\" || v !== 0) v = 1;\n\n\t// if direction is out, just emit change event since we can reliably predict\n\t// if the value has changed; we don't have to rely on watching a file\n\tif(this.direction === 'out') {\n\t\tif(this.value !== v) {\n\t\t\t_write(v, this.PATH.VALUE, function() {\n\t\t\t\tself.value = v;\n\t\t\t\tself.emit('valueChange', v);\n\t\t\t\tself.emit('change', v);\n\t\t\t\tif(typeof callback === 'function') callback(self.value, true);\n\t\t\t});\n\t\t} else {\n\t\t\tif(typeof callback === 'function') callback(this.value, false);\n\t\t}\n\t}\n};\nGPIO.prototype.reset = function(fn) { this.set(0, fn); };\n\nexports.logging = false;\nexports.export = function(headerNum, direction) { return new GPIO(headerNum, direction); };\nexports.unexport = _unexport;\n\n"}